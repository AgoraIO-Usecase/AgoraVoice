Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\n    <string name=\"app_name\" translatable=\"false\">Agora Voice</string>\n\n    <string name=\"app_id\" translatable=\"false\"><##APP_ID##></string>\n    <string name=\"customer_id\" translatable=\"false\"><##CUSTOMER_ID##></string>\n    <string name=\"customer_certificate\" translatable=\"false\"><##CUSTOMER_CER##></string>\n    <string name=\"bugly_app_id\" translatable=\"false\"><##BUGLYl_APP_ID##></string>\n\n    <string name=\"powered_by_agora\" translatable=\"false\">Powered by Agora.io</string>\n\n    <!-- Main Activity -->\n    <string name=\"main_navigation_home\">Home</string>\n    <string name=\"main_navigation_profile\">My Profile</string>\n\n    <string name=\"main_start_chat\">Start</string>\n\n    <string name=\"scene_type_chat_room\">Chatroom</string>\n\n    <!-- Profile -->\n    <string name=\"profile_setting_title_nickname\">Nickname</string>\n    <string name=\"profile_setting_title_about\">About</string>\n    <string name=\"profile_edit_avatar_title\">Select Avatar</string>\n    <string name=\"profile_edit_nickname_title\">Input</string>\n\n    <string name=\"text_cancel\">Cancel</string>\n    <string name=\"text_done\">Done</string>\n    <string name=\"text_confirm\">Confirm</string>\n    <string name=\"text_accept\">Accept</string>\n    <string name=\"text_reject\">Reject</string>\n    <string name=\"text_upgrade\">Upgrade</string>\n    <string name=\"text_yes\">Yes</string>\n    <string name=\"text_no\">No</string>\n    <string name=\"text_leave\">Leave</string>\n\n    <string name=\"about_title\">About</string>\n    <string name=\"privacy_policy_title\">Privacy</string>\n    <string name=\"privacy_website_link\">https://www.agora.io/en/privacy-policy/</string>\n\n    <string name=\"disclaimer_title\">Disclaimer</string>\n    <string name=\"disclaimer_content\">&#160;&#160;&#160;&#160;Agora Voice (\"this product\") is a test product provided by Agora.\n        Agora enjoys the copyright and ownership of this product. It is hereby granted free of charge to anyone who obtains\n        a copy of this product and related documentation (hereinafter referred to as \"software\") to try the software without limitation,\n        including but not limited to trial, copy, modify, merge, publish, distribute, but this product shall not be used\n        For any commercial use, you may not sublicense and/or sell copies of the software.\\n\\n &#160;&#160;&#160;&#160;\n        This product is provided \"as is\" without any express warranty, including but not limited to guarantees of suitability,\n        suitability for specific purposes, and non-infringement. Whether it is due to any contract, infringement or other forms\n        of conduct related to this product or the trial of this product or other methods, Agora will not be responsible for any claims,\n        damages or other liabilities.\\n\\n &#160;&#160;&#160;&#160;You are free to choose whether to try the services provided by this product.\n        If you download, install, or try the services provided in this product, it means that you trust the owner of the product,\n        and Agora shall not be responsible for any form of loss or injury caused by yourself or others when you try the services\n        provided in this product for any reason.</string>\n\n    <string name=\"sign_up_agora_title\">Agora Account</string>\n    <string name=\"sign_up_website_link\">https://sso.agora.io/en/signup</string>\n\n    <string name=\"version_title\">Agora Voice Version</string>\n    <string name=\"release_date_title\">Release Date</string>\n    <string name=\"release_date\" translatable=\"false\">2021.03.04</string>\n    <string name=\"rte_sdk_version_title\">SDK Version</string>\n    <string name=\"upload_log_title\">Upload log</string>\n    <string name=\"upload_log_success_message_format\">Log id %s copied into the clipboard</string>\n    <string name=\"upload_log_fail_message_format\">Log upload fails: %s</string>\n\n    <string name=\"official_website\" translatable=\"false\">www.agora.io</string>\n\n    <!-- Policies -->\n    <string name=\"room_restriction_policy\">This is a testing product. Please refrain from using it commercially. The max duration per session is 10 minutes, and the max number of participants per channel is 10. </string>\n\n    <string name=\"permission_not_granted\">Necessary permissions not granted</string>\n\n    <!-- Nickname Edit -->\n    <string name=\"profile_name_edit_hint\">Input nickname&#8230;</string>\n    <string name=\"profile_name_edit_message_empty\">Nickname cannot be blank</string>\n    <string name=\"profile_name_edit_message_success\">Nickname updated</string>\n    <string name=\"profile_name_edit_message_fail\">Nickname update fails</string>\n    <string name=\"profile_name_edit_message_same\">Same nickname</string>\n    <string name=\"profile_name_too_long_toast_message\">Nickname cannot exceed %d characters</string>\n\n    <!-- Prepare Activity -->\n    <string name=\"live_prepare_hint\">Channel Name</string>\n    <string name=\"go_live\">Go Live</string>\n    <string name=\"room_name_too_long_toast_format\">Maximum length of channel name is %d</string>\n    <string name=\"no_room_name_toast\">Channel name cannot be blank</string>\n    <string name=\"create_room_fail\">Fails to create a room %d %s</string>\n\n    <string name=\"send_empty_message\">Empty messages are not sent</string>\n\n    <string-array name=\"random_channel_names\">\n        <item>Cheer</item>\n        <item>Vibe</item>\n        <item>Devine</item>\n        <item>Duo</item>\n        <item>Ablaze</item>\n        <item>Amaze</item>\n        <item>Harmony</item>\n        <item>Verse</item>\n        <item>Vigilant</item>\n        <item>Contender</item>\n        <item>Vista</item>\n        <item>Wander</item>\n        <item>Collections</item>\n        <item>Moon</item>\n        <item>Boho</item>\n        <item>Everest</item>\n    </string-array>\n\n    <string-array name=\"random_surnames\">\n        <item>Atkinson</item>\n        <item>Edwards</item>\n        <item>Gibson</item>\n        <item>Holmes</item>\n        <item>Kelvin</item>\n        <item>Lloyd</item>\n        <item>Payne</item>\n        <item>White</item>\n    </string-array>\n\n    <string-array name=\"random_names\">\n        <item>Alexander</item>\n        <item>Halley</item>\n        <item>Rickey</item>\n        <item>Xavior</item>\n        <item>Yolanda</item>\n        <item>Corynn</item>\n        <item>Daniel</item>\n        <item>Kelly</item>\n        <item>Lauren</item>\n    </string-array>\n\n    <!-- Components -->\n    <string name=\"room_bottom_bar_input_hint\">Say something &#8230;</string>\n\n    <string name=\"live_system_notification_member_joined\">joined channel</string>\n    <string name=\"live_system_notification_member_left\">left channel</string>\n    <string name=\"co_hosting_occupied\">becomes a co-host</string>\n    <string name=\"co_hosting_left\">becomes an audience</string>\n\n    <string name=\"live_message_gift_send\">gives %s</string>\n\n    <string name=\"rtc_starts_property_format\">Audio tx channels: %d %nAudio tx sampleRate: %d</string>\n    <string name=\"rtc_stats_format\">Audio tx bitrate: %.2f kbps%nAudio tx packet loss rate: %.2f%% %nAudio rx bitrate: %.2f kbps%nAudio rx packet loss rate: %.2f%% %nDelay: %d ms</string>\n\n    <!-- Action Sheets -->\n    <string name=\"action_sheet_background_title\">Background</string>\n\n    <string name=\"action_sheet_voice_beauty_title\">Voice Beautifier</string>\n    <string name=\"action_sheet_voice_beauty_type_title_1\">Chat Beautifier</string>\n    <string name=\"action_sheet_voice_beauty_type_title_2\">Singing Beautifier</string>\n    <string name=\"action_sheet_voice_beauty_type_title_3\">Timbre Transformation</string>\n\n    <string-array name=\"voice_beauty_chat_names\">\n        <item>Magnetic</item>\n        <item>Fresh</item>\n        <item>Vitality</item>\n    </string-array>\n\n    <string-array name=\"voice_beauty_sing_names\">\n        <item>Hall (Male)</item>\n        <item>Large Room (Male)</item>\n        <item>Small Room (Male)</item>\n        <item>Hall (Female)</item>\n        <item>Large Room (Female)</item>\n        <item>Small Room (Female)</item>\n    </string-array>\n\n    <string-array name=\"voice_beauty_sing_names_simple\">\n        <item>Man</item>\n        <item>Woman</item>\n    </string-array>\n\n    <string-array name=\"voice_beauty_timbre\">\n        <item>Vigorous</item>\n        <item>Deep</item>\n        <item>Mellow</item>\n        <item>Falsetto</item>\n        <item>Full</item>\n        <item>Clear</item>\n        <item>Resounding</item>\n        <item>Ringing</item>\n    </string-array>\n\n    <string name=\"action_sheet_sound_effect_title\">Sound Effect</string>\n    <string-array name=\"action_sheet_sound_effect_types\">\n        <item>Room Acoustics</item>\n        <item>Voice Changer Effect</item>\n        <item>Style Transformation</item>\n        <item>Pitch Correction</item>\n        <item>Magic Tone</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_sound_effect_space_names\">\n        <item>KTV</item>\n        <item>Vocal Concert</item>\n        <item>Studio</item>\n        <item>Phonograph</item>\n        <item>Virtual Stereo</item>\n        <item>Spacial</item>\n        <item>Ethereal</item>\n        <item>3D Voice</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_sound_effect_change_names\">\n        <item>Uncle</item>\n        <item>Old Man</item>\n        <item>Boy</item>\n        <item>Sister</item>\n        <item>Girl</item>\n        <item>Pig King</item>\n        <item>Hulk</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_sound_effect_style_names\">\n        <item>R&#38;B</item>\n        <item>Popular</item>\n        <item>Rock</item>\n        <item>HipHop</item>\n    </string-array>\n\n    <string name=\"action_sheet_sound_effect_enable_electronic_voice\">Enable Electronic Voice</string>\n    <string name=\"action_sheet_sound_effect_electronic_mode_hint\">Select Mode</string>\n    <string name=\"action_sheet_sound_effect_electronic_key_hint\">Select the starting key</string>\n\n    <string-array name=\"action_sheet_sound_effect_electronic_keys\">\n        <item>Major</item>\n        <item>Minor</item>\n        <item>Japanese\\nPantatonic</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_sound_effect_electronic_tones\">\n        <item>A</item>\n        <item>Bb</item>\n        <item>B</item>\n        <item>C</item>\n        <item>Dd</item>\n        <item>D</item>\n        <item>Eb</item>\n        <item>E</item>\n        <item>F</item>\n        <item>Gb</item>\n        <item>G</item>\n        <item>Ab</item>\n    </string-array>\n\n    <string name=\"action_sheet_3d_voice_title\">3D Voice</string>\n    <string name=\"action_sheet_3d_voice_description\">Speed adjustment controls the speed of sound rotation (The fastest is 60 rpm, the slowest is 1 rpm) </string>\n    <string name=\"action_sheet_3d_voice_text_min\">Min</string>\n    <string name=\"action_sheet_3d_voice_text_max\">Max</string>\n\n    <string name=\"action_sheet_sound_effect_magic_notes_coming_soon\">Coming Soon</string>\n\n    <string name=\"action_sheet_tool_title\">Tool</string>\n\n    <string-array name=\"action_sheet_tool_audience\">\n        <item>Statistics</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_tool_host\">\n        <item>Monitor</item>\n        <item>Statistics</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_tool_owner\">\n        <item>Monitor</item>\n        <item>Background Music</item>\n        <item>Background</item>\n        <item>Statistics</item>\n    </string-array>\n\n    <string-array name=\"action_sheet_gift_names\">\n        <item>Bell</item>\n        <item>Ice Cream</item>\n        <item>Wine</item>\n        <item>Cake</item>\n        <item>Ring</item>\n        <item>Watch</item>\n        <item>Diamond</item>\n        <item>Rocket</item>\n    </string-array>\n\n    <string name=\"action_sheet_gift_title\">Gift</string>\n    <string name=\"action_sheet_gift_send\">Send</string>\n    <string name=\"gift_action_sheet_value_format\">(%d Coins)</string>\n\n    <string name=\"action_sheet_music_title\">Music</string>\n    <string name=\"action_sheet_music_credit_hint\">Music:&#160;&#160;</string>\n    <string name=\"action_sheet_music_credit_link\">https://www.bensound.com</string>\n\n    <string name=\"action_sheet_user_list_title\">Users</string>\n    <string name=\"action_sheet_user_list_type_all\">All</string>\n    <string name=\"action_sheet_user_list_type_apply\">Request</string>\n    <string name=\"action_sheet_user_list_inviting\">Inviting</string>\n    <string name=\"action_sheet_user_list_invite\">Invite</string>\n\n    <string-array name=\"action_sheet_seat_operations\">\n        <item>Open</item>\n        <item>Close</item>\n        <item>Invite</item>\n        <item>Request</item>\n        <item>Mute</item>\n        <item>Unmute</item>\n        <item>End</item>\n        <item>End</item>\n    </string-array>\n\n    <string name=\"action_sheet_seat_operate_mute\">Mute</string>\n    <string name=\"action_sheet_seat_operate_unmute\">Unmute</string>\n\n    <!-- Network status detection -->\n    <string name=\"network_unavailable\">Network error - Cannot connect to network now, please try later</string>\n    <string name=\"network_switch_to_wifi\">You are in WIFI network</string>\n    <string name=\"network_switch_to_mobile\">Use cellular data instead of WIFI， May incur data charges</string>\n\n    <string name=\"scene_empty_list_hint\">Create a channel to start</string>\n    <string name=\"scene_server_error\">No data, please try later</string>\n    <string name=\"scene_no_connection_title\">Network error</string>\n\n    <!-- Dialogs -->\n    <string name=\"dialog_leave_room_title_host\">Leave Channel?</string>\n    <string name=\"dialog_leave_room_message_host\">This will end the session.</string>\n    <string name=\"dialog_owner_end_live_title\">Live streaming ends</string>\n    <string name=\"dialog_owner_end_live_message\">Do you want to end this live session?</string>\n    <string name=\"dialog_invite_user_title\">Co-hosting invitation to %s? </string>\n    <string name=\"dialog_receive_invite_message\">Do you accept the invitation to become a co-host？</string>\n    <string name=\"dialog_leave_seat_message_owner\">Stop %s from co-hosting?</string>\n    <string name=\"dialog_leave_seat_message_host\">Stop co-hosting?</string>\n    <string name=\"dialog_lock_seat_title\">Close seat?</string>\n    <string name=\"dialog_lock_seat_message\">Co-hosting fails if the seat is occupied</string>\n    <string name=\"dialog_unlock_seat_title\">Open seat?</string>\n    <string name=\"dialog_application_accepted_title\">Do you accept %s\\'s request?</string>\n    <string name=\"dialog_application_rejected_title\">Do you reject %s\\'s request?</string>\n    <string name=\"dialog_application_title\">Request co-hosting?</string>\n    <string name=\"dialog_mute_title\">Mute %s?</string>\n    <string name=\"dialog_unmute_title\">Unmute %s?</string>\n    <string name=\"dialog_upgrade_recommend_title\">Recommend upgrade</string>\n    <string name=\"dialog_upgrade_recommend_message\">You are recommended to upgrade Agora Voice for new features.</string>\n    <string name=\"dialog_upgrade_force_title\">Forced upgrade</string>\n    <string name=\"dialog_upgrade_force_message\">You must upgrade to use Agora Voice</string>\n\n    <!-- Toasts -->\n    <string name=\"toast_invite_success\">Invitation sent</string>\n    <string name=\"toast_invite_timeout\">Invitation timeout</string>\n    <string name=\"toast_repeat_invite\">%s has been invited recently</string>\n    <string name=\"toast_request_fail_message\">%s, error code: %d</string>\n    <string name=\"toast_invite_fail\">Invitation failed, error code %d</string>\n    <string name=\"toast_invite_accept\">%s accepted co-hosting invitation</string>\n    <string name=\"toast_invite_rejected\">%s rejected co-hosting invitation</string>\n    <string name=\"toast_apply_accepted\">Co-hosting request approved</string>\n    <string name=\"toast_apply_rejected\">Co-hosting request rejected</string>\n    <string name=\"toast_user_has_taken_seat\">The user you invited is a host.</string>\n    <string name=\"toast_force_leave_by_owner\">The host changes your role to audience</string>\n    <string name=\"toast_application_sent\">Co-hosting request sent</string>\n    <string name=\"toast_no_wired_mic_plugged\">Plug in a headset</string>\n    <string name=\"toast_join_class_fail\">Join room failed</string>\n    <string name=\"toast_room_end_timeout\">The max duration per session is 10 minutes</string>\n    <string name=\"toast_room_end_owner_leave\">Live streaming ends</string>\n    <string name=\"toast_room_end\">Room Ends</string>\n    <string name=\"toast_app_version_fail\">Acquire app version fail</string>\n    <string name=\"toast_link_empty\">The link address is empty</string>\n\n    <!-- Error Messages -->\n    <string name=\"error_no\">OK</string>\n    <string name=\"error_seat_taken\">Seat is occupied. Please try another seat</string>\n    <string name=\"error_room_max_user\">This product is for test purpose only, each room can only have 10 users at most</string>\n    <string name=\"error_room_not_exist\">Room dos not exist</string>\n    <string name=\"error_no_connection\">Connection lost. Please try later</string>\n    <string name=\"operation_fail\">Operation fails</string>\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision fd8fc92c6bc84a8b0def03b3aebf2d517ada5fb9)
+++ app/src/main/res/values/strings.xml	(date 1617886012000)
@@ -1,10 +1,10 @@
 <resources>
     <string name="app_name" translatable="false">Agora Voice</string>
 
-    <string name="app_id" translatable="false"><##APP_ID##></string>
-    <string name="customer_id" translatable="false"><##CUSTOMER_ID##></string>
-    <string name="customer_certificate" translatable="false"><##CUSTOMER_CER##></string>
-    <string name="bugly_app_id" translatable="false"><##BUGLYl_APP_ID##></string>
+    <string name="app_id" translatable="false">f488493d1886435f963dfb3d95984fd4</string>
+    <string name="customer_id" translatable="false">27bf8c2dd53a4d0da01d16c819e9a9c7</string>
+    <string name="customer_certificate" translatable="false">b367cb24b911442a89b59a7f7f4b359c</string>
+    <string name="bugly_app_id" translatable="false"></string>
 
     <string name="powered_by_agora" translatable="false">Powered by Agora.io</string>
 
Index: app/src/main/java/io/agora/agoravoice/business/server/ServerClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package io.agora.agoravoice.business.server;\n\nimport android.text.TextUtils;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.gson.Gson;\n\nimport java.io.IOException;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\nimport io.agora.agoravoice.business.log.Logging;\nimport io.agora.agoravoice.business.server.retrofit.interfaces.GeneralService;\nimport io.agora.agoravoice.business.server.retrofit.interfaces.LogService;\nimport io.agora.agoravoice.business.server.retrofit.interfaces.SeatService;\nimport io.agora.agoravoice.business.server.retrofit.interfaces.RoomService;\nimport io.agora.agoravoice.business.server.retrofit.interfaces.UserService;\nimport io.agora.agoravoice.business.server.retrofit.listener.GeneralServiceListener;\nimport io.agora.agoravoice.business.log.LogUploaderListener;\nimport io.agora.agoravoice.business.server.retrofit.listener.RoomServiceListener;\nimport io.agora.agoravoice.business.server.retrofit.listener.SeatServiceListener;\nimport io.agora.agoravoice.business.server.retrofit.listener.UserServiceListener;\nimport io.agora.agoravoice.business.server.retrofit.model.body.ChatMsgBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.CreateRoomBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.CreateUserBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.EditUserBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.ModifyRoomBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.OssBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.SeatBehaviorBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.LoginBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.SeatStateBody;\nimport io.agora.agoravoice.business.server.retrofit.model.body.SendGiftBody;\nimport io.agora.agoravoice.business.server.retrofit.model.requests.Request;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.BooleanResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.CreateUserResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.GiftListResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.JoinResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.LoginResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.MusicResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.OssResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.Resp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.RoomListResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.StringResp;\nimport io.agora.agoravoice.business.server.retrofit.model.responses.VersionResp;\nimport okhttp3.OkHttpClient;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\nimport retrofit2.http.Url;\nimport retrofit2.internal.EverythingIsNonNull;\n\npublic class ServerClient {\n    private static final String SERVER_HOST_PRODUCT = \"https://api.agora.io/\";\n    private static final String OSS_HOST_PRODUCT = \"https://api-solutions.agoralab.co/\";\n    private static final String ERROR_UNKNOWN_MSG = \"\";\n    private static final String API_ROOT_PATH = \"ent/voice\";\n\n    private static final int MAX_RESPONSE_THREAD = 10;\n    private static final int DEFAULT_TIMEOUT_IN_SECONDS = 30;\n\n    private static final int ERROR_OK = 0;\n    public static final int ERROR_UNKNOWN = -1;\n    public static final int ERROR_CONNECTION = -2;\n\n    private final GeneralService mGeneralService;\n    private final UserService mUserService;\n    private final RoomService mRoomService;\n    private final SeatService mSeatService;\n    private final LogService mLogService;\n\n    private String mAppId;\n\n    public ServerClient(String appId) {\n        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()\n                .connectTimeout(DEFAULT_TIMEOUT_IN_SECONDS, TimeUnit.SECONDS)\n                .readTimeout(DEFAULT_TIMEOUT_IN_SECONDS, TimeUnit.SECONDS)\n                .writeTimeout(DEFAULT_TIMEOUT_IN_SECONDS, TimeUnit.SECONDS)\n                .build();\n\n        Retrofit.Builder builder = new Retrofit.Builder()\n                .baseUrl(SERVER_HOST_PRODUCT)\n                .client(okHttpClient)\n                .callbackExecutor(Executors.newFixedThreadPool(MAX_RESPONSE_THREAD))\n                .addConverterFactory(GsonConverterFactory.create());\n\n        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor(Logging::d);\n        interceptor.level(HttpLoggingInterceptor.Level.BODY);\n        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();\n        builder.client(client);\n\n        Retrofit retrofit = builder.build();\n        mGeneralService = retrofit.create(GeneralService.class);\n        mUserService = retrofit.create(UserService.class);\n        mRoomService = retrofit.create(RoomService.class);\n        mSeatService = retrofit.create(SeatService.class);\n\n        builder = new Retrofit.Builder()\n                .baseUrl(OSS_HOST_PRODUCT)\n                .client(okHttpClient)\n                .callbackExecutor(Executors.newFixedThreadPool(MAX_RESPONSE_THREAD))\n                .addConverterFactory(GsonConverterFactory.create());\n        builder.client(client);\n        retrofit = builder.build();\n\n        mLogService = retrofit.create(LogService.class);\n\n        mAppId = appId;\n    }\n\n    public ServerClient() {\n        this(null);\n    }\n\n    public void setAppId(String appId) {\n        mAppId = appId;\n    }\n\n    /**\n     * @return the service bridge path, used to navigate the\n     * different services of scenarios of servers. This path\n     * is relatively fixed but configurable when needed\n     */\n    private String getRootPath() {\n        return API_ROOT_PATH;\n    }\n\n    public String getBaseUrl() {\n        return SERVER_HOST_PRODUCT;\n    }\n\n    @EverythingIsNonNull\n    public void checkVersion(String appCode, int osType, int terminalType,\n                             String version, GeneralServiceListener listener) {\n        mGeneralService.checkVersion(appCode, osType, terminalType, version).enqueue(new Callback<VersionResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<VersionResp> call, Response<VersionResp> response) {\n                VersionResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onGeneralServiceFail(Request.CHECK_VERSION, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onGeneralServiceFail(Request.CHECK_VERSION, resp.code, resp.msg);\n                } else {\n                    listener.onAppVersionCheckSuccess(resp.data);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<VersionResp> call, Throwable t) {\n                listener.onGeneralServiceFail(Request.CHECK_VERSION, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    public void musicInfoList(GeneralServiceListener listener) {\n        mGeneralService.getMusicList().enqueue(new Callback<MusicResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<MusicResp> call, Response<MusicResp> response) {\n                MusicResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onGeneralServiceFail(Request.MUSIC_LIST, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onGeneralServiceFail(Request.MUSIC_LIST, resp.code, resp.msg);\n                } else {\n                    listener.onGetMusicList(resp.data);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<MusicResp> call, Throwable t) {\n                listener.onGeneralServiceFail(Request.MUSIC_LIST, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    public void giftList(GeneralServiceListener listener) {\n        mGeneralService.getGiftList(getRootPath()).enqueue(new Callback<GiftListResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<GiftListResp> call, Response<GiftListResp> response) {\n                GiftListResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onGeneralServiceFail(Request.GIFT_LIST, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onGeneralServiceFail(Request.GIFT_LIST, resp.code, resp.msg);\n                } else {\n                    listener.onGetGiftList(resp.data);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<GiftListResp> call, Throwable t) {\n                listener.onGeneralServiceFail(Request.GIFT_LIST, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void getOssParams(String appId, OssBody body, LogUploaderListener listener) {\n        mLogService.getOssParams(appId, body).enqueue(new Callback<OssResp>() {\n            @Override\n            public void onResponse(Call<OssResp> call, Response<OssResp> response) {\n                OssResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onOssParamsFail(Request.UPLOAD_LOGS_OSS, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onOssParamsFail(Request.UPLOAD_LOGS_OSS, resp.code, resp.msg);\n                } else {\n                    listener.onOssParamsResponse(resp);\n                }\n            }\n\n            @Override\n            public void onFailure(Call<OssResp> call, Throwable t) {\n                listener.onOssParamsFail(Request.UPLOAD_LOGS_OSS, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    public Call<StringResp> logStsCallback(@Url String url) {\n        return mLogService.logStsCallback(url);\n    }\n\n    private boolean appIdValid() {\n        if (TextUtils.isEmpty(mAppId)) {\n            Logging.e(\"createUser app id is empty\");\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    @EverythingIsNonNull\n    public void createUser(String userName, UserServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mUserService.createUser(getRootPath(), mAppId,\n                new CreateUserBody(userName)).enqueue(new Callback<CreateUserResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<CreateUserResp> call, Response<CreateUserResp> response) {\n                CreateUserResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onUserServiceFailed(Request.CREATE_USER, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onUserServiceFailed(Request.CREATE_USER, resp.code, resp.msg);\n                } else {\n                    listener.onUserCreateSuccess(resp.data.userId, userName);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<CreateUserResp> call, Throwable t) {\n                listener.onUserServiceFailed(Request.CREATE_USER, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void editUserSuccess(String token, final String userId,\n                                final String userName, UserServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mUserService.editUser(getRootPath(), mAppId, token, userId,\n                new EditUserBody(userName)).enqueue(new Callback<BooleanResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<BooleanResp> call, Response<BooleanResp> response) {\n                BooleanResp resp = response.body();\n                if (resp == null) {\n                    listener.onUserServiceFailed(Request.EDIT_USER, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onUserServiceFailed(Request.EDIT_USER, resp.code, resp.msg);\n                } else {\n                    listener.onUserEditSuccess(userId, userName);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<BooleanResp> call, Throwable t) {\n                listener.onUserServiceFailed(Request.EDIT_USER, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    public void login(@NonNull String userId, @NonNull UserServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mUserService.login(getRootPath(), mAppId, new LoginBody(userId)).enqueue(new Callback<LoginResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<LoginResp> call, Response<LoginResp> response) {\n                LoginResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onUserServiceFailed(Request.LOGIN, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onUserServiceFailed(Request.LOGIN, resp.code, resp.msg);\n                } else {\n                    listener.onLoginSuccess(userId, resp.data.userToken, resp.data.rtmToken);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<LoginResp> call, Throwable t) {\n                listener.onUserServiceFailed(Request.LOGIN, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    public void join(@NonNull String token, @NonNull String roomId,\n                     @NonNull String userId, @NonNull UserServiceListener listener) {\n        mUserService.join(token, getRootPath(), mAppId, roomId, userId).enqueue(new Callback<JoinResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<JoinResp> call, Response<JoinResp> response) {\n                JoinResp resp = response.body();\n                if (resp != null && resp.data != null) {\n                    if (resp.code == ERROR_OK) {\n                        listener.onJoinSuccess(userId, resp.data.streamId, resp.data.role);\n                    } else {\n                        listener.onUserServiceFailed(Request.JOIN, resp.code, resp.msg);\n                    }\n                } else {\n                    try {\n                        String message = response.errorBody().string();\n                        Resp r = new Gson().fromJson(message, Resp.class);\n                        listener.onUserServiceFailed(Request.JOIN, r.code, r.msg);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<JoinResp> call, Throwable t) {\n                listener.onUserServiceFailed(Request.JOIN, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void createRoom(String token, String roomName, int duration, int maxNum,\n                           String image, @NonNull RoomServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mRoomService.createRoom(getRootPath(), mAppId, token,\n                new CreateRoomBody(roomName, image, duration, maxNum)).enqueue(new Callback<StringResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<StringResp> call, Response<StringResp> response) {\n                StringResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onRoomServiceFailed(Request.CREATE_ROOM, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onRoomServiceFailed(Request.CREATE_ROOM, resp.code, resp.msg);\n                } else {\n                    listener.onRoomCreated(resp.data, roomName);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<StringResp> call, Throwable t) {\n                listener.onRoomServiceFailed(Request.CREATE_ROOM, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void closeRoom(String token, String roomId, RoomServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mRoomService.closeRoom(getRootPath(), mAppId, token, roomId).enqueue(new Callback<BooleanResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<BooleanResp> call, Response<BooleanResp> response) {\n                BooleanResp resp = response.body();\n                if (resp == null) {\n                    listener.onRoomServiceFailed(Request.LEAVE_ROOM, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onRoomServiceFailed(Request.LEAVE_ROOM, resp.code, resp.msg);\n                } else {\n                    listener.onLeaveRoom(roomId);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<BooleanResp> call, Throwable t) {\n                listener.onRoomServiceFailed(Request.LEAVE_ROOM, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void leaveRoom(String token, String roomId, String userId, RoomServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mRoomService.leaveRoom(getRootPath(), token, mAppId, roomId, userId).enqueue(new Callback<BooleanResp>() {\n            @Override\n            public void onResponse(Call<BooleanResp> call, Response<BooleanResp> response) {\n                BooleanResp resp = response.body();\n                if (resp == null) {\n                    listener.onRoomServiceFailed(Request.LEAVE_ROOM, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onRoomServiceFailed(Request.LEAVE_ROOM, resp.code, resp.msg);\n                } else {\n                    listener.onLeaveRoom(roomId);\n                }\n            }\n\n            @Override\n            public void onFailure(Call<BooleanResp> call, Throwable t) {\n                listener.onRoomServiceFailed(Request.LEAVE_ROOM, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void getRoomList(String token, final String nextId,\n                            int count, int type, RoomServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mRoomService.getRoomList(getRootPath(), mAppId, token, nextId,\n                count, type).enqueue(new Callback<RoomListResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<RoomListResp> call, Response<RoomListResp> response) {\n                RoomListResp resp = response.body();\n                if (resp == null || resp.data == null) {\n                    listener.onRoomServiceFailed(Request.ROOM_LIST, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onRoomServiceFailed(Request.ROOM_LIST, resp.code, resp.msg);\n                } else {\n                    listener.onGetRoomList(nextId, resp.data.total, resp.data.list);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<RoomListResp> call, Throwable t) {\n                listener.onRoomServiceFailed(Request.ROOM_LIST, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void sendGift(String token, String roomId,\n                         String giftId, int count, RoomServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mRoomService.sendGift(getRootPath(), mAppId, token, roomId, new SendGiftBody(giftId, count))\n            .enqueue(new Callback<BooleanResp>() {\n                @Override\n                @EverythingIsNonNull\n                public void onResponse(Call<BooleanResp> call, Response<BooleanResp> response) {\n                    BooleanResp resp = response.body();\n                    if (resp == null) {\n                        listener.onRoomServiceFailed(Request.SEND_GIFT, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                    } else if (!resp.data) {\n                        listener.onRoomServiceFailed(Request.SEND_GIFT, resp.code, resp.msg);\n                    }\n                }\n\n                @Override\n                @EverythingIsNonNull\n                public void onFailure(Call<BooleanResp> call, Throwable t) {\n                    listener.onRoomServiceFailed(Request.SEND_GIFT, ERROR_CONNECTION, t.getMessage());\n                }\n            });\n    }\n\n    @EverythingIsNonNull\n    public void modifyRoom(String token, String roomId,\n                           String backgroundId, RoomServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mRoomService.modifyRoom(getRootPath(), mAppId, token, roomId, new ModifyRoomBody(backgroundId))\n                .enqueue(new Callback<BooleanResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<BooleanResp> call, Response<BooleanResp> response) {\n                BooleanResp resp = response.body();\n                if (resp == null) {\n                    listener.onRoomServiceFailed(Request.MODIFY_ROOM, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (!resp.data) {\n                    listener.onRoomServiceFailed(Request.MODIFY_ROOM, resp.code, resp.msg);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<BooleanResp> call, Throwable t) {\n                listener.onRoomServiceFailed(Request.MODIFY_ROOM, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    public void sendChatMessage(@NonNull String token, @NonNull String appId,\n                                @NonNull String roomId, @NonNull String message,\n                                @NonNull RoomServiceListener listener) {\n        mRoomService.sendChatMessage(token, appId, roomId, new ChatMsgBody(message))\n            .enqueue(new Callback<Resp>() {\n                @Override\n                @EverythingIsNonNull\n                public void onResponse(Call<Resp> call, Response<Resp> response) {\n                    Resp resp = response.body();\n                    if (resp == null) {\n                        listener.onRoomServiceFailed(Request.SEND_CHAT, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                    } else if (resp.code != ERROR_OK) {\n                        listener.onRoomServiceFailed(Request.SEND_CHAT, resp.code, resp.msg);\n                    }\n                }\n\n                @Override\n                @EverythingIsNonNull\n                public void onFailure(Call<Resp> call, Throwable t) {\n                    listener.onRoomServiceFailed(Request.SEND_CHAT, ERROR_CONNECTION, t.getMessage());\n                }\n            }\n        );\n    }\n\n    @EverythingIsNonNull\n    public void requestSeatBehavior(String token, String roomId, String userId, String userName,\n                                    int no, int type, SeatServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mSeatService.requestSeatBehavior(getRootPath(), mAppId, token, roomId, userId,\n                new SeatBehaviorBody(no, type)).enqueue(new Callback<StringResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<StringResp> call, Response<StringResp> response) {\n                StringResp resp = response.body();\n                if (resp == null) {\n                    listener.onSeatBehaviorFail(type, userId, userName, no, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (resp.code != ERROR_OK) {\n                    listener.onSeatBehaviorFail(type, userId, userName, no, resp.code, resp.msg);\n                } else {\n                    listener.onSeatBehaviorSuccess(roomId, type, userId, userName, no, resp.code, resp.msg);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<StringResp> call, Throwable t) {\n                listener.onSeatBehaviorFail(type, userId, userName, no, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n\n    @EverythingIsNonNull\n    public void requestSeatStateChange(String token, String roomId,\n                                       int no, int state, SeatServiceListener listener) {\n        if (!appIdValid()) return;\n\n        mSeatService.modifySeatState(getRootPath(), mAppId, token, roomId,\n                new SeatStateBody(no, state)).enqueue(new Callback<BooleanResp>() {\n            @Override\n            @EverythingIsNonNull\n            public void onResponse(Call<BooleanResp> call, Response<BooleanResp> response) {\n                BooleanResp resp = response.body();\n                if (resp == null) {\n                    listener.onSeatStateChangeFail(no, state, ERROR_UNKNOWN, ERROR_UNKNOWN_MSG);\n                } else if (!resp.data) {\n                    listener.onSeatStateChangeFail(no, state, resp.code, resp.msg);\n                } else {\n                    listener.onSeatStateChanged(no, state);\n                }\n            }\n\n            @Override\n            @EverythingIsNonNull\n            public void onFailure(Call<BooleanResp> call, Throwable t) {\n                listener.onSeatStateChangeFail(no, state, ERROR_CONNECTION, t.getMessage());\n            }\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/io/agora/agoravoice/business/server/ServerClient.java	(revision fd8fc92c6bc84a8b0def03b3aebf2d517ada5fb9)
+++ app/src/main/java/io/agora/agoravoice/business/server/ServerClient.java	(date 1617886149000)
@@ -54,7 +54,8 @@
 import retrofit2.internal.EverythingIsNonNull;
 
 public class ServerClient {
-    private static final String SERVER_HOST_PRODUCT = "https://api.agora.io/";
+//    private static final String SERVER_HOST_PRODUCT = "https://api.agora.io/";
+    private static final String SERVER_HOST_PRODUCT = "https://api-solutions-dev.bj2.agoralab.co/";
     private static final String OSS_HOST_PRODUCT = "https://api-solutions.agoralab.co/";
     private static final String ERROR_UNKNOWN_MSG = "";
     private static final String API_ROOT_PATH = "ent/voice";
Index: app/src/main/java/io/agora/agoravoice/AgoraApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package io.agora.agoravoice;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.SharedPreferences;\n\nimport com.tencent.bugly.crashreport.CrashReport;\n\nimport io.agora.agoravoice.business.log.Logging;\nimport io.agora.agoravoice.manager.ProxyManager;\nimport io.agora.agoravoice.utils.Const;\n\npublic class AgoraApplication extends Application {\n    private ProxyManager mProxy;\n    private Config mConfig;\n    private SharedPreferences mPreferences;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        // Log must be initialized before \n        // all other functions\n        Logging.init(this);\n        initGlobalVariables();\n        initBugly();\n    }\n\n    private void initGlobalVariables() {\n        mPreferences = getSharedPreferences(Const.SP_NAME, Context.MODE_PRIVATE);\n        mConfig = new Config();\n        mProxy = new ProxyManager(this);\n    }\n\n    public ProxyManager proxy() {\n        return mProxy;\n    }\n\n    public Config config() {\n        return mConfig;\n    }\n\n    public SharedPreferences preferences() {\n        return mPreferences;\n    }\n\n    private void initBugly() {\n        CrashReport.initCrashReport(getApplicationContext(),\n                getResources().getString(R.string.bugly_app_id), false);\n    }\n\n    @Override\n    public void onTerminate() {\n        super.onTerminate();\n        if (mProxy != null) mProxy.release();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/io/agora/agoravoice/AgoraApplication.java	(revision fd8fc92c6bc84a8b0def03b3aebf2d517ada5fb9)
+++ app/src/main/java/io/agora/agoravoice/AgoraApplication.java	(date 1617885877000)
@@ -44,8 +44,8 @@
     }
 
     private void initBugly() {
-        CrashReport.initCrashReport(getApplicationContext(),
-                getResources().getString(R.string.bugly_app_id), false);
+        //CrashReport.initCrashReport(getApplicationContext(),
+        //        getResources().getString(R.string.bugly_app_id), false);
     }
 
     @Override
